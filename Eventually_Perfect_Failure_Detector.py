# Author: K. Zirger
# 2022

from copy import deepcopy
import math

class node_class():
  def __init__(self, index, n, is_leader = False):
    self.T = 1 # Heartbeat time
    self.n = n
    self.neighbors = []
    self.group_no = None
    self.index = index
    self.index_in_group = 0
    self.clock = 1
    self.group = None
    self.group_bag = {}
    self.group_lastHB = []
    self.group_suspect = []
    self.suspect = []
    # fill suspect list with False
    for i in range(n):
      self.suspect.append(False)
    self.group_timeout = []
    self.group_TTL = []

    self.is_leader = is_leader
    self.index_in_leaders = None
    self.leader_groups = {}
    self.leaders = []
    self.leader_lastHB = []
    self.leader_timeout = []
    self.leader_TTL = []

    self.local_leader_bag = []
    self.messages = []
    self.local_TTL = None
    self.local_is_outgoing = None

  def updateGroup(self, group, index_in_group):
    self.group = group.copy()
    self.index_in_group = index_in_group
    for node in group:
      self.group_lastHB.append(0)
      # suspect default to true for testing?
      self.group_suspect.append(False)
      self.group_timeout.append(self.T)
      self.group_TTL.append(1)

  def updateLeaders(self, leader_groups, leaders):
    self.leader_groups = leader_groups.copy()
    self.leaders = leaders.copy()
    for i in range(len(leaders)):
      self.leader_lastHB.append(0)
      self.leader_timeout.append(self.T)
      self.leader_TTL.append(0)

  def updateLeader(self, index_in_leaders):
    self.is_leader = True
    self.index_in_leaders = index_in_leaders
  
  def groupSend(self):
    self.clock += self.T
    self.group_bag = {(self, len(self.group) - 1)}
    for index in range(len(self.group)):
      if self.group[index] != self:
        if self.group_suspect[index] == False and self.group_TTL[index] > 1:
          self.group_bag.add((self.group[index], (self.group_TTL[index] - 1)))
    for group_neighbor in list(set(self.group) & set(self.neighbors)):
      group_neighbor.groupReceive(self.group_bag, self)

  def groupReceive(self, gr_bag, sending_node):
    for r, m in gr_bag:
      if r == sending_node or r not in self.neighbors:
        if self.group_TTL[r.index_in_group] <= m:
          self.group_TTL[r.index_in_group] = m
          if self.group_suspect[r.index_in_group] == True:
            self.group_suspect[r.index_in_group] = False
            # ESTIMATE_TIMEOUT
            if r in self.group:
              self.group_timeout[r.index_in_group] = 2 * self.group_timeout[r.index_in_group]
          self.group_lastHB[r.index_in_group] = self.clock

    for node in self.group:
      self.suspect[node.index] = self.group_suspect[node.index_in_group]

  def leaderSend(self):
    leader_bag = [(self, len(self.leaders) - 1, self.group_suspect)]
    for leader in [x for x in self.leaders if x != self]:
      if self.leader_TTL[leader.index_in_leaders] > 1:
        # GET_GROUP_SUSPECT
        external_group_suspect = []
        for node in leader.group:
          external_group_suspect.append(self.suspect[node.index])
        # END GET_GROUP_SUSPECT
        leader_bag.append((leader, self.leader_TTL[leader.index_in_leaders], external_group_suspect))

    # send to non-group neighbors
    for neighbor in [x for x in self.neighbors if x not in self.group]:
      neighbor.leaderBagReceiveNonGroup(self, leader_bag)

    # send to group neighbors
    for neighbor in [x for x in self.neighbors if x in self.group]:
      is_outgoing = True
      TTL = len(self.group) - 1
      neighbor.leaderBagReceiveGroup(self, leader_bag, TTL, is_outgoing)

  def leaderBagReceiveGroup(self, sending_node, lead_bag, TTL, is_outgoing):
    if (not is_outgoing) and self.is_leader:
      for r, m, array in [x for x in lead_bag if x == sending_node or x not in self.neighbors]:
        if self.leader_TTL[r.index_in_leaders] <= m:
          self.leader_TTL[r.index_in_leaders] = m
          for node in r.group:
            self.suspect[node.index] = array[node.index_in_group]
          if self.suspect[r.index]:
            self.suspect[r.index] = False
            # ESTIMATE_TIMEOUT
            if r in self.leaders:
              self.leader_timeout[r.index_in_leaders] = 2 * self.leader_timeout[r.index_in_leaders]
            # END ESTIMATE_TIMEOUT
          self.leader_lastHB[r.index_in_leaders] = self.clock

    if not self.is_leader:
      self.local_TTL = TTL

      # UNION lead_bag into local_leader_bag

      for lead_ind, lead_ent in enumerate(lead_bag):
        match_found = False
        for loc_ind, loc_ent in enumerate(self.local_leader_bag):
          if lead_ent[0] == loc_ent[0]:
            for index, update in enumerate(lead_ent[2]):
              if update == False and loc_ent[2][index] == True:
                loc_ent[2][index] = False
            match_found = True
        if not match_found:
          self.local_leader_bag.append(lead_ent)
      if len(self.local_leader_bag) < 1:
        self.local_leader_bag = lead_bag
      
      # UPDATE_SUSPECT
      for r, m, array in lead_bag:
        if self.leader_TTL[r.index_in_leaders] <= m:
          self.leader_TTL[r.index_in_leaders] = m
          for node in r.group:
            self.suspect[node.index] = array[node.index_in_group]
          if self.suspect[r.index]:
            self.suspect[r.index] = False
            # ESTIMATE_TIMEOUT
            if r in self.leaders:
              self.leader_timeout[r.index_in_leaders] = 2 * self.leader_timeout[r.index_in_leaders]
            # END ESTIMATE_TIMEOUT
          self.leader_lastHB[r.index_in_leaders] = self.clock
      # END UPDATE_SUSPECT
  
  def leaderBagReceiveNonGroup(self, sending_node, lead_bag):
    if self.is_leader:
      for r, m, array in [x for x in lead_bag if x == sending_node or x not in self.neighbors]:
        if self.leader_TTL[r.index_in_leaders] <= m:
          self.leader_TTL[r.index_in_leaders] = m
          for node in r.group:
            if self.suspect[node.index] == True and array[node.index_in_group] == False:
              self.suspect[node.index] = array[node.index_in_group]
          if self.suspect[r.index]:
            self.suspect[r.index] = False
            # ESTIMATE_TIMEOUT
            if r in self.leaders:
              self.leader_timeout[r.index_in_leaders] = 2 * self.leader_timeout[r.index_in_leaders]
            # END ESTIMATE_TIMEOUT
          self.leader_lastHB[r.index_in_leaders] = self.clock

    else:
      is_outgoing = False
      TTL = len(self.group) - 1
      self.messages.append((lead_bag, TTL, is_outgoing))

  def sendOverlays(self):
    # Send to other groups
    # if is_outgoing
    if len(self.local_leader_bag) > 0:
      for neighbor in [x for x in self.neighbors if x not in self.group]:
        neighbor.leaderBagReceiveNonGroup(self, self.local_leader_bag)
      
    # Within-Group Send/Receive
    # if TTL > 1
    if True:
      for neighbor in [x for x in self.neighbors if x in self.group]:
        neighbor.leaderBagReceiveGroup(self, self.local_leader_bag, len(self.group) - 1, False)

    # Send messages
    if len(self.messages) > 0:
      for neighbor in [x for x in self.neighbors if x in self.group]:
        for message in self.messages:
          neighbor.leaderBagReceiveGroup(self, message[0], message[1], message[2])

def buildNetwork(size: int, connections: list, groups: list, leaders: list):
  nodes = []
  for i in range(size):
    nodes.append(node_class(i, size))
  for index in range(len(connections)):
    for neighbor in connections[index]:
      if nodes[neighbor] not in nodes[index].neighbors:
        nodes[index].neighbors.append(nodes[neighbor])

  node_groups = []
  for group in groups:
    temp_group = []
    for node_i in group:
      temp_group.append(nodes[node_i])
    node_groups.append(temp_group)

  node_leaders = []
  for leader_i in leaders:
    node_leaders.append(nodes[leader_i])
  
  for group in node_groups:
    for node_i, node in enumerate(group):
      node.updateGroup(group, node_i)
      node.updateLeaders(node_groups, node_leaders)

  for leader_i, leader in enumerate(node_leaders):
    leader.updateLeader(leader_i)

  return {
    "nodes": nodes,
    "groups": node_groups,
    "leaders": node_leaders
  }

def runHeartbeat(network, iter):
  if iter % 3 == 0:
    for leader in network["leaders"]:
      leader.leaderSend()
  elif iter % 3 == 1:
    for node in network["nodes"]:
      node.groupSend()
  else:
    for node in network["nodes"]:
      node.sendOverlays()

def checkConverged(network):
  for node in network["nodes"]:
    if True in node.suspect:
      return False
  return True

def buildTopologyList(size, connections, groups, leaders):
  topologies = []

  default_groups = [range(size)]

  default_leaders = [0]

  node_to_sus = math.floor(size * 0.75)

  # non-clustered algorithm

  network_one = buildNetwork(size, connections, default_groups, default_leaders)

  # Single suspect

  temp_network = deepcopy(network_one)

  temp_network["nodes"][0].suspect[node_to_sus] = True
  temp_network["nodes"][0].group_suspect[node_to_sus] = True

  topologies.append(temp_network)

  # Each suspects one node

  temp_network = deepcopy(network_one)

  for node in temp_network["nodes"]:

    node.suspect[node_to_sus] = True
    node.group_suspect[node_to_sus] = True

  topologies.append(temp_network)

  # Each suspects every other

  temp_network = deepcopy(network_one)

  for node in temp_network["nodes"]:
    for group_member in range(len(node.group)):
      node.group_suspect[group_member] = True
    for network_member in range(node.n):
      node.suspect[network_member] = True

  topologies.append(temp_network)

  # clustered algorithm

  network_two = buildNetwork(size, connections, groups, leaders)

  # Single suspect

  temp_network = deepcopy(network_two)

  temp_network["nodes"][0].suspect[node_to_sus] = True

  topologies.append(temp_network)

  # Each suspects one node

  temp_network = deepcopy(network_two)

  for node in temp_network["nodes"]:

    node.suspect[node_to_sus] = True
    if temp_network["nodes"][node_to_sus] in node.group:
      node.group_suspect[temp_network["nodes"][node_to_sus].index_in_group] = True

  topologies.append(temp_network)

  # Each suspects every other

  temp_network = deepcopy(network_two)

  for node in temp_network["nodes"]:
    for group_member in range(len(node.group)):
      node.group_suspect[group_member] = True
    for network_member in range(node.n):
      node.suspect[network_member] = True

  topologies.append(temp_network)
      
  return topologies

def buildExample1():
  connections = [
    [5],
    [5, 6, 2],
    [1, 3, 8],
    [2, 4, 8, 9],
    [3, 8, 9, 19],
    [0, 1, 11],
    [1, 7, 11, 12],
    [6, 13],
    [2, 3, 4, 9, 13],
    [3, 4, 8],
    [13, 15],
    [5, 6],
    [6, 16, 17],
    [7, 8, 10, 14, 18],
    [13],
    [10, 16],
    [12, 15],
    [12, 18],
    [13, 17, 19],
    [18, 4]
  ]

  groups = [[
    0, 5, 6, 7, 11,
    1, 2, 3, 4, 9,
    8, 13, 14, 18, 19,
    10, 12, 15, 16, 17
    ]]

  leaders = [5]

  return buildTopologyList(20, connections, groups, leaders)

def buildExample2():
  connections = [
    [1],
    [0, 2],
    [1, 3],
    [2, 4],
    [3, 5],
    [4, 6],
    [5, 7],
    [6, 8],
    [7, 9],
    [8, 10],
    [9, 11],
    [10, 12],
    [11, 13],
    [12, 14],
    [13, 15],
    [14, 16],
    [15, 17],
    [16, 18],
    [17, 19],
    [18, 20],
    [19, 21],
    [20, 22],
    [21, 23],
    [22, 24],
    [23, 25],
    [24, 26],
    [25, 27],
    [26, 28],
    [27, 29],
    [28, 30],
    [29, 31],
    [30, 32],
    [31, 33],
    [32, 34],
    [33, 35],
    [34, 36],
    [35, 37],
    [36, 38],
    [37, 39],
    [38, 40],
    [39, 41],
    [40, 42],
    [41, 43],
    [42, 44],
    [43, 45],
    [44, 46],
    [45, 47],
    [46, 48],
    [47, 49],
    [48, 50],
    [49, 51],
    [50, 52],
    [51, 53],
    [52, 54],
    [53, 55],
    [54, 56],
    [55, 57],
    [56, 58],
    [57, 59],
    [58, 60],
    [59, 61],
    [60, 62],
    [61, 63],
    [62, 64],
    [63, 65],
    [64, 66],
    [65, 67],
    [66, 68],
    [67, 69],
    [68, 70],
    [69, 71],
    [70, 72],
    [71, 73],
    [72, 74],
    [73, 75],
    [74, 76],
    [75, 77],
    [76, 78],
    [77, 79],
    [78, 80],
    [79, 81],
    [80, 82],
    [81, 83],
    [82, 84],
    [83, 85],
    [84, 86],
    [85, 87],
    [86, 88],
    [87, 89],
    [88, 90],
    [89, 91],
    [90, 92],
    [91, 93],
    [92, 94],
    [93, 95],
    [94, 96],
    [95, 97],
    [96, 98],
    [97, 99],
    [98]
  ]

  groups = [
    range(0, 10),
    range(10, 20),
    range(20, 30),
    range(30, 40),
    range(40, 50),
    range(50, 60),
    range(60, 70),
    range(70, 80),
    range(80, 90),
    range(90, 100)
  ]

  leaders = [4, 15, 24, 35, 44, 55, 64, 75, 84, 95]

  return buildTopologyList(100, connections, groups, leaders)

def buildExample3():
  connections = [
    [2, 4],
    [3, 5],
    [0, 4, 6],
    [1, 5, 9],
    [0, 2, 9],
    [1, 3, 9],
    [2, 8, 9],
    [9],
    [6],
    [3, 4, 5, 6, 7, 19, 99],
    [12, 14],
    [13, 15],
    [10, 14, 16],
    [11, 15, 19],
    [10, 12, 19],
    [11, 13, 19],
    [12, 18, 19],
    [19],
    [16],
    [13, 14, 15, 16, 17, 9, 29],
    [22, 24],
    [23, 25],
    [20, 24, 26],
    [21, 25, 29],
    [20, 22, 29],
    [21, 23, 29],
    [22, 28, 29],
    [29],
    [26],
    [23, 24, 25, 26, 27, 19, 39],
    [32, 34],
    [33, 35],
    [30, 34, 36],
    [31, 35, 39],
    [30, 32, 39],
    [31, 33, 39],
    [32, 38, 39],
    [39],
    [36],
    [33, 34, 35, 36, 37, 29, 49],
    [42, 44],
    [43, 45],
    [40, 44, 46],
    [41, 45, 49],
    [40, 42, 49],
    [41, 43, 49],
    [42, 48, 49],
    [49],
    [46],
    [43, 44, 45, 46, 47, 39, 59],
    [52, 54],
    [53, 55],
    [50, 54, 56],
    [51, 55, 59],
    [50, 52, 59],
    [51, 53, 59],
    [52, 58, 59],
    [59],
    [56],
    [53, 54, 55, 56, 57, 49, 69],
    [62, 64],
    [63, 65],
    [60, 64, 66],
    [61, 65, 69],
    [60, 62, 69],
    [61, 63, 69],
    [62, 68, 69],
    [69],
    [66],
    [63, 64, 65, 66, 67, 59, 79],
    [72, 74],
    [73, 75],
    [70, 74, 76],
    [71, 75, 79],
    [70, 72, 79],
    [71, 73, 79],
    [72, 78, 79],
    [79],
    [76],
    [73, 74, 75, 76, 77, 69, 89],
    [82, 84],
    [83, 85],
    [80, 84, 86],
    [81, 85, 89],
    [80, 82, 89],
    [81, 83, 89],
    [82, 88, 89],
    [89],
    [86],
    [83, 84, 85, 86, 87, 79, 99],
    [92, 94],
    [93, 95],
    [90, 94, 96],
    [91, 95, 99],
    [90, 92, 99],
    [91, 93, 99],
    [92, 98, 99],
    [99],
    [96],
    [93, 94, 95, 96, 97, 9, 89]
  ]

  groups = [
    range(0, 10),
    range(10, 20),
    range(20, 30),
    range(30, 40),
    range(40, 50),
    range(50, 60),
    range(60, 70),
    range(70, 80),
    range(80, 90),
    range(90, 100)
  ]

  leaders = [9, 19, 29, 39, 49, 59, 69, 79, 89, 99]

  return buildTopologyList(100, connections, groups, leaders)

def buildExample4():
  connections = [
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [0, 2, 3, 4, 5, 6, 7, 8, 9],
    [0, 1, 3, 4, 5, 6, 7, 8, 9],
    [0, 1, 2, 4, 5, 6, 7, 8, 9],
    [0, 1, 2, 3, 5, 6, 7, 8, 9],
    [0, 1, 2, 3, 4, 6, 7, 8, 9],
    [0, 1, 2, 3, 4, 5, 7, 8, 9],
    [0, 1, 2, 3, 4, 5, 6, 8, 9],
    [0, 1, 2, 3, 4, 5, 6, 7, 9],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 19, 99],
    [11, 12, 13, 14, 15, 16, 17, 18, 19],
    [10, 12, 13, 14, 15, 16, 17, 18, 19],
    [10, 11, 13, 14, 15, 16, 17, 18, 19],
    [10, 11, 12, 14, 15, 16, 17, 18, 19],
    [10, 11, 12, 13, 15, 16, 17, 18, 19],
    [10, 11, 12, 13, 14, 16, 17, 18, 19],
    [10, 11, 12, 13, 14, 15, 17, 18, 19],
    [10, 11, 12, 13, 14, 15, 16, 18, 19],
    [10, 11, 12, 13, 14, 15, 16, 17, 19],
    [10, 11, 12, 13, 14, 15, 16, 17, 18, 9, 29],
    [21, 22, 23, 24, 25, 26, 27, 28, 29],
    [20, 22, 23, 24, 25, 26, 27, 28, 29],
    [20, 21, 23, 24, 25, 26, 27, 28, 29],
    [20, 21, 22, 24, 25, 26, 27, 28, 29],
    [20, 21, 22, 23, 25, 26, 27, 28, 29],
    [20, 21, 22, 23, 24, 26, 27, 28, 29],
    [20, 21, 22, 23, 24, 25, 27, 28, 29],
    [20, 21, 22, 23, 24, 25, 26, 28, 29],
    [20, 21, 22, 23, 24, 25, 26, 27, 29],
    [20, 21, 22, 23, 24, 25, 26, 27, 28, 19, 39],
    [31, 32, 33, 34, 35, 36, 37, 38, 39],
    [30, 32, 33, 34, 35, 36, 37, 38, 39],
    [30, 31, 33, 34, 35, 36, 37, 38, 39],
    [30, 31, 32, 34, 35, 36, 37, 38, 39],
    [30, 31, 32, 33, 35, 36, 37, 38, 39],
    [30, 31, 32, 33, 34, 36, 37, 38, 39],
    [30, 31, 32, 33, 34, 35, 37, 38, 39],
    [30, 31, 32, 33, 34, 35, 36, 38, 39],
    [30, 31, 32, 33, 34, 35, 36, 37, 39],
    [30, 31, 32, 33, 34, 35, 36, 37, 38, 29, 49],
    [41, 42, 43, 44, 45, 46, 47, 48, 49],
    [40, 42, 43, 44, 45, 46, 47, 48, 49],
    [40, 41, 43, 44, 45, 46, 47, 48, 49],
    [40, 41, 42, 44, 45, 46, 47, 48, 49],
    [40, 41, 42, 43, 45, 46, 47, 48, 49],
    [40, 41, 42, 43, 44, 46, 47, 48, 49],
    [40, 41, 42, 43, 44, 45, 47, 48, 49],
    [40, 41, 42, 43, 44, 45, 46, 48, 49],
    [40, 41, 42, 43, 44, 45, 46, 47, 49],
    [40, 41, 42, 43, 44, 45, 46, 47, 48, 39, 59],
    [51, 52, 53, 54, 55, 56, 57, 58, 59],
    [50, 52, 53, 54, 55, 56, 57, 58, 59],
    [50, 51, 53, 54, 55, 56, 57, 58, 59],
    [50, 51, 52, 54, 55, 56, 57, 58, 59],
    [50, 51, 52, 53, 55, 56, 57, 58, 59],
    [50, 51, 52, 53, 54, 56, 57, 58, 59],
    [50, 51, 52, 53, 54, 55, 57, 58, 59],
    [50, 51, 52, 53, 54, 55, 56, 58, 59],
    [50, 51, 52, 53, 54, 55, 56, 57, 59],
    [50, 51, 52, 53, 54, 55, 56, 57, 58, 49, 69],
    [61, 62, 63, 64, 65, 66, 67, 68, 69],
    [60, 62, 63, 64, 65, 66, 67, 68, 69],
    [60, 61, 63, 64, 65, 66, 67, 68, 69],
    [60, 61, 62, 64, 65, 66, 67, 68, 69],
    [60, 61, 62, 63, 65, 66, 67, 68, 69],
    [60, 61, 62, 63, 64, 66, 67, 68, 69],
    [60, 61, 62, 63, 64, 65, 67, 68, 69],
    [60, 61, 62, 63, 64, 65, 66, 68, 69],
    [60, 61, 62, 63, 64, 65, 66, 67, 69],
    [60, 61, 62, 63, 64, 65, 66, 67, 68, 59, 79],
    [71, 72, 73, 74, 75, 76, 77, 78, 79],
    [70, 72, 73, 74, 75, 76, 77, 78, 79],
    [70, 71, 73, 74, 75, 76, 77, 78, 79],
    [70, 71, 72, 74, 75, 76, 77, 78, 79],
    [70, 71, 72, 73, 75, 76, 77, 78, 79],
    [70, 71, 72, 73, 74, 76, 77, 78, 79],
    [70, 71, 72, 73, 74, 75, 77, 78, 79],
    [70, 71, 72, 73, 74, 75, 76, 78, 79],
    [70, 71, 72, 73, 74, 75, 76, 77, 79],
    [70, 71, 72, 73, 74, 75, 76, 77, 78, 69, 89],
    [81, 82, 83, 84, 85, 86, 87, 88, 89],
    [80, 82, 83, 84, 85, 86, 87, 88, 89],
    [80, 81, 83, 84, 85, 86, 87, 88, 89],
    [80, 81, 82, 84, 85, 86, 87, 88, 89],
    [80, 81, 82, 83, 85, 86, 87, 88, 89],
    [80, 81, 82, 83, 84, 86, 87, 88, 89],
    [80, 81, 82, 83, 84, 85, 87, 88, 89],
    [80, 81, 82, 83, 84, 85, 86, 88, 89],
    [80, 81, 82, 83, 84, 85, 86, 87, 89],
    [80, 81, 82, 83, 84, 85, 86, 87, 88, 79, 99],
    [91, 92, 93, 94, 95, 96, 97, 98, 99],
    [90, 92, 93, 94, 95, 96, 97, 98, 99],
    [90, 91, 93, 94, 95, 96, 97, 98, 99],
    [90, 91, 92, 94, 95, 96, 97, 98, 99],
    [90, 91, 92, 93, 95, 96, 97, 98, 99],
    [90, 91, 92, 93, 94, 96, 97, 98, 99],
    [90, 91, 92, 93, 94, 95, 97, 98, 99],
    [90, 91, 92, 93, 94, 95, 96, 98, 99],
    [90, 91, 92, 93, 94, 95, 96, 97, 99],
    [90, 91, 92, 93, 94, 95, 96, 97, 98, 9, 89]
  ]

  groups = [
    range(0, 10),
    range(10, 20),
    range(20, 30),
    range(30, 40),
    range(40, 50),
    range(50, 60),
    range(60, 70),
    range(70, 80),
    range(80, 90),
    range(90, 100)
  ]

  leaders = [9, 19, 29, 39, 49, 59, 69, 79, 89, 99]

  return buildTopologyList(100, connections, groups, leaders)

def buildExample5():
  connections = [
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [0, 2, 3, 4, 5, 6, 7, 8, 9],
    [0, 1, 3, 4, 5, 6, 7, 8, 9],
    [0, 1, 2, 4, 5, 6, 7, 8, 9],
    [0, 1, 2, 3, 5, 6, 7, 8, 9],
    [0, 1, 2, 3, 4, 6, 7, 8, 9],
    [0, 1, 2, 3, 4, 5, 7, 8, 9],
    [0, 1, 2, 3, 4, 5, 6, 8, 9],
    [0, 1, 2, 3, 4, 5, 6, 7, 9],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 19, 99, 29, 39, 49, 59, 69, 79, 89],
    [11, 12, 13, 14, 15, 16, 17, 18, 19],
    [10, 12, 13, 14, 15, 16, 17, 18, 19],
    [10, 11, 13, 14, 15, 16, 17, 18, 19],
    [10, 11, 12, 14, 15, 16, 17, 18, 19],
    [10, 11, 12, 13, 15, 16, 17, 18, 19],
    [10, 11, 12, 13, 14, 16, 17, 18, 19],
    [10, 11, 12, 13, 14, 15, 17, 18, 19],
    [10, 11, 12, 13, 14, 15, 16, 18, 19],
    [10, 11, 12, 13, 14, 15, 16, 17, 19],
    [10, 11, 12, 13, 14, 15, 16, 17, 18, 9, 29, 39, 49, 59, 69, 79, 89, 99],
    [21, 22, 23, 24, 25, 26, 27, 28, 29],
    [20, 22, 23, 24, 25, 26, 27, 28, 29],
    [20, 21, 23, 24, 25, 26, 27, 28, 29],
    [20, 21, 22, 24, 25, 26, 27, 28, 29],
    [20, 21, 22, 23, 25, 26, 27, 28, 29],
    [20, 21, 22, 23, 24, 26, 27, 28, 29],
    [20, 21, 22, 23, 24, 25, 27, 28, 29],
    [20, 21, 22, 23, 24, 25, 26, 28, 29],
    [20, 21, 22, 23, 24, 25, 26, 27, 29],
    [20, 21, 22, 23, 24, 25, 26, 27, 28, 19, 39, 9, 49, 59, 69, 79, 89, 99],
    [31, 32, 33, 34, 35, 36, 37, 38, 39],
    [30, 32, 33, 34, 35, 36, 37, 38, 39],
    [30, 31, 33, 34, 35, 36, 37, 38, 39],
    [30, 31, 32, 34, 35, 36, 37, 38, 39],
    [30, 31, 32, 33, 35, 36, 37, 38, 39],
    [30, 31, 32, 33, 34, 36, 37, 38, 39],
    [30, 31, 32, 33, 34, 35, 37, 38, 39],
    [30, 31, 32, 33, 34, 35, 36, 38, 39],
    [30, 31, 32, 33, 34, 35, 36, 37, 39],
    [30, 31, 32, 33, 34, 35, 36, 37, 38, 29, 49, 9, 19, 59, 69, 79, 89, 99],
    [41, 42, 43, 44, 45, 46, 47, 48, 49],
    [40, 42, 43, 44, 45, 46, 47, 48, 49],
    [40, 41, 43, 44, 45, 46, 47, 48, 49],
    [40, 41, 42, 44, 45, 46, 47, 48, 49],
    [40, 41, 42, 43, 45, 46, 47, 48, 49],
    [40, 41, 42, 43, 44, 46, 47, 48, 49],
    [40, 41, 42, 43, 44, 45, 47, 48, 49],
    [40, 41, 42, 43, 44, 45, 46, 48, 49],
    [40, 41, 42, 43, 44, 45, 46, 47, 49],
    [40, 41, 42, 43, 44, 45, 46, 47, 48, 39, 59, 9, 19, 29, 69, 79, 89, 99],
    [51, 52, 53, 54, 55, 56, 57, 58, 59],
    [50, 52, 53, 54, 55, 56, 57, 58, 59],
    [50, 51, 53, 54, 55, 56, 57, 58, 59],
    [50, 51, 52, 54, 55, 56, 57, 58, 59],
    [50, 51, 52, 53, 55, 56, 57, 58, 59],
    [50, 51, 52, 53, 54, 56, 57, 58, 59],
    [50, 51, 52, 53, 54, 55, 57, 58, 59],
    [50, 51, 52, 53, 54, 55, 56, 58, 59],
    [50, 51, 52, 53, 54, 55, 56, 57, 59],
    [50, 51, 52, 53, 54, 55, 56, 57, 58, 49, 69, 9, 19, 29, 39, 79, 89, 99],
    [61, 62, 63, 64, 65, 66, 67, 68, 69],
    [60, 62, 63, 64, 65, 66, 67, 68, 69],
    [60, 61, 63, 64, 65, 66, 67, 68, 69],
    [60, 61, 62, 64, 65, 66, 67, 68, 69],
    [60, 61, 62, 63, 65, 66, 67, 68, 69],
    [60, 61, 62, 63, 64, 66, 67, 68, 69],
    [60, 61, 62, 63, 64, 65, 67, 68, 69],
    [60, 61, 62, 63, 64, 65, 66, 68, 69],
    [60, 61, 62, 63, 64, 65, 66, 67, 69],
    [60, 61, 62, 63, 64, 65, 66, 67, 68, 59, 79, 9, 19, 29, 39, 49, 89, 99],
    [71, 72, 73, 74, 75, 76, 77, 78, 79],
    [70, 72, 73, 74, 75, 76, 77, 78, 79],
    [70, 71, 73, 74, 75, 76, 77, 78, 79],
    [70, 71, 72, 74, 75, 76, 77, 78, 79],
    [70, 71, 72, 73, 75, 76, 77, 78, 79],
    [70, 71, 72, 73, 74, 76, 77, 78, 79],
    [70, 71, 72, 73, 74, 75, 77, 78, 79],
    [70, 71, 72, 73, 74, 75, 76, 78, 79],
    [70, 71, 72, 73, 74, 75, 76, 77, 79],
    [70, 71, 72, 73, 74, 75, 76, 77, 78, 69, 89, 9, 19, 29, 39, 49, 59, 99],
    [81, 82, 83, 84, 85, 86, 87, 88, 89],
    [80, 82, 83, 84, 85, 86, 87, 88, 89],
    [80, 81, 83, 84, 85, 86, 87, 88, 89],
    [80, 81, 82, 84, 85, 86, 87, 88, 89],
    [80, 81, 82, 83, 85, 86, 87, 88, 89],
    [80, 81, 82, 83, 84, 86, 87, 88, 89],
    [80, 81, 82, 83, 84, 85, 87, 88, 89],
    [80, 81, 82, 83, 84, 85, 86, 88, 89],
    [80, 81, 82, 83, 84, 85, 86, 87, 89],
    [80, 81, 82, 83, 84, 85, 86, 87, 88, 79, 99, 9, 19, 29, 39, 49, 59, 69],
    [91, 92, 93, 94, 95, 96, 97, 98, 99],
    [90, 92, 93, 94, 95, 96, 97, 98, 99],
    [90, 91, 93, 94, 95, 96, 97, 98, 99],
    [90, 91, 92, 94, 95, 96, 97, 98, 99],
    [90, 91, 92, 93, 95, 96, 97, 98, 99],
    [90, 91, 92, 93, 94, 96, 97, 98, 99],
    [90, 91, 92, 93, 94, 95, 97, 98, 99],
    [90, 91, 92, 93, 94, 95, 96, 98, 99],
    [90, 91, 92, 93, 94, 95, 96, 97, 99],
    [90, 91, 92, 93, 94, 95, 96, 97, 98, 9, 89, 19, 29, 39, 49, 59, 69, 79]
  ]

  groups = [
    range(0, 10),
    range(10, 20),
    range(20, 30),
    range(30, 40),
    range(40, 50),
    range(50, 60),
    range(60, 70),
    range(70, 80),
    range(80, 90),
    range(90, 100)
  ]

  leaders = [9, 19, 29, 39, 49, 59, 69, 79, 89, 99]

  return buildTopologyList(100, connections, groups, leaders)

def buildExample6():
  connections = [
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98]
  ]

  groups = [
    range(0, 10),
    range(10, 20),
    range(20, 30),
    range(30, 40),
    range(40, 50),
    range(50, 60),
    range(60, 70),
    range(70, 80),
    range(80, 90),
    range(90, 100)
  ]

  leaders = [9, 19, 29, 39, 49, 59, 69, 79, 89, 99]

  return buildTopologyList(100, connections, groups, leaders)

def buildExample7():
  connections = [
    [2, 5, 6, 72],
    [3],
    [0, 4],
    [1, 4],
    [2, 3, 8, 9],
    [0, 7],
    [0],
    [5, 9],
    [4, 66],
    [4, 7],
    [16, 17, 19],
    [12, 14, 33],
    [11, 17, 18],
    [16, 18],
    [11],
    [19, 18, 68],
    [10, 13],
    [10, 12, 19],
    [12, 13, 15, 23, 67],
    [10, 15, 17],
    [22, 25, 26],
    [23, 85],
    [20, 24],
    [21, 24, 18],
    [22, 23, 28, 29, 25],
    [20, 27, 24],
    [20],
    [25, 29],
    [24],
    [24, 27, 81],
    [36, 37, 39],
    [32, 34],
    [31, 37, 38, 99],
    [36, 38, 11],
    [31],
    [39, 38],
    [30, 33],
    [30, 32, 39],
    [32, 33, 35],
    [30, 35, 37],
    [42, 45, 46],
    [43],
    [40, 44],
    [41, 44, 63],
    [42, 43, 48, 49],
    [40, 47],
    [40],
    [45, 49],
    [44],
    [44, 47],
    [56, 57, 59],
    [52, 54],
    [51, 57, 58, 83],
    [56, 58],
    [51],
    [59, 58, 63],
    [50, 53],
    [50, 52, 59],
    [52, 53, 55],
    [50, 55, 57],
    [62, 65, 66],
    [63],
    [60, 64],
    [61, 64, 55, 43],
    [62, 63, 68, 69],
    [60, 67],
    [60, 8],
    [65, 69, 18],
    [64, 15],
    [64, 67],
    [76, 77, 79],
    [72, 74],
    [71, 77, 78, 0],
    [76, 78],
    [71],
    [79, 78],
    [70, 73],
    [70, 72, 79],
    [72, 73, 75],
    [70, 75, 77],
    [82, 85, 86],
    [83, 29],
    [80, 84],
    [81, 84, 52],
    [82, 83, 88, 89],
    [80, 87, 21],
    [80],
    [85, 89],
    [84],
    [84, 87],
    [96, 97, 99],
    [92, 94],
    [91, 97, 98],
    [96, 98],
    [91],
    [99, 98],
    [90, 93],
    [90, 92, 99],
    [92, 93, 95],
    [90, 95, 97, 32],
  ]

  groups = [
    range(0, 10),
    range(10, 20),
    range(20, 30),
    range(30, 40),
    range(40, 50),
    range(50, 60),
    range(60, 70),
    range(70, 80),
    range(80, 90),
    range(90, 100)
  ]

  leaders = [9, 19, 29, 39, 49, 59, 69, 79, 89, 99]

  return buildTopologyList(100, connections, groups, leaders)

def main():

  # print("In-Paper Network Example, old algorithm, one error")

  # topologies = buildExample1()
  # for network in topologies:
  #   iter = 0
  #   while not checkConverged(network):
  #     iter += 1
  #     runHeartbeat(network, iter)
  #   print("Converged after: " + str(iter) + " heartbeats")

  print("chain")
  topologies = buildExample2()
  for network in topologies:
    iter = 0
    while not checkConverged(network):
      iter += 1
      runHeartbeat(network, iter)
    print("Converged after: " + str(iter) + " heartbeats")

  print("avg clusters & avg leaders")
  topologies = buildExample3()
  for network in topologies:
    iter = 0
    while not checkConverged(network):
      iter += 1
      runHeartbeat(network, iter)
    print("Converged after: " + str(iter) + " heartbeats")
  
  print("full clusters & avg leaders")
  topologies = buildExample4()
  for network in topologies:
    iter = 0
    while not checkConverged(network):
      iter += 1
      runHeartbeat(network, iter)
    print("Converged after: " + str(iter) + " heartbeats")

  print("full clusters & full leaders")
  topologies = buildExample5()
  for network in topologies:
    iter = 0
    while not checkConverged(network):
      iter += 1
      runHeartbeat(network, iter)
    print("Converged after: " + str(iter) + " heartbeats")

  print("fully connected graph")
  topologies = buildExample6()
  for network in topologies:
    iter = 0
    while not checkConverged(network):
      iter += 1
      runHeartbeat(network, iter)
    print("Converged after: " + str(iter) + " heartbeats")

  print("random")
  topologies = buildExample7()
  for network in topologies:
    iter = 0
    while not checkConverged(network):
      iter += 1
      runHeartbeat(network, iter)
    print("Converged after: " + str(iter) + " heartbeats")

if __name__ == "__main__":
  main()